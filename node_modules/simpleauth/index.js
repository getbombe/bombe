/**
  TO USE:
      var simpleauth = require("simpleauth");

      simpleauth.verifyKey(blah)
 */

var crypto = require("crypto");

var secretSalt = "B0mb3|sAwes0me=123ThisIsALongSALT"; //don't tell people this. 
var secretHashTimes = 5; //re-hash this number of times to discourage rainbow tables

//returns a hashed key for a email. this key will be issued to the user
exports.generateKey = function(email) {
	var currentHash = email + secretSalt;
	for(var i=0; i<secretHashTimes; i++){
		var hash = crypto.createHash("md5"); //md5 not really secure, will do for now
		currentHash = hash.update(currentHash).digest("hex");
	}
	return currentHash;
};

//verifies whether possibleKey was issued by Leaf to the email
exports.verifyKey = function(email, possibleKey) {
	var correctKey = exports.generateKey(email);

	return correctKey == possibleKey;
};

//simple unit test
exports.testSimpleAuth = function() {
	var mockEmail1 = "jack@getbombe.com";
	var mockEmail2 = "gao@getbombbb.com";

	var mockKey1 = exports.generateKey(mockEmail1);
	var mockKey2 = exports.generateKey(mockEmail2);

	var true1 = exports.verifyKey(mockEmail1, mockKey1);
	var true2 = exports.verifyKey(mockEmail2, mockKey2);
	var false1 = exports.verifyKey(mockEmail1, mockKey2);
	var false2 = exports.verifyKey(mockEmail2, mockKey1);
	var false3 = exports.verifyKey(mockEmail1, "3004eca81524738ea901a1212dd73727");
	var false4 = exports.verifyKey(mockEmail2, "somerandomstring");

	return true1 && true2 && !false1 && !false2 && !false3 && !false4;
}